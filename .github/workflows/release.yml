name: Release Workflow

on:
  workflow_run:
    workflows: [ "Java CI with Maven" ]
    branches: [ 0.6.0-gh ]
    types:
      - completed


jobs:
  release:
    name: Release Process
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Java CI with Maven artifacts
        uses: actions/download-artifact@v4
        with:
          name: java-artifacts
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Set up JDK 18
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '18'

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "::set-output name=latest_tag::$latest_tag"

      - name: Get current version from pom.xml
        id: get_current_version
        run: |
          current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "::set-output name=current_version::$current_version"

      - name: Check if pom.xml version has changed
        id: check_version
        run: |
          if [ "${{ steps.get_current_version.outputs.current_version }}" != "${{ steps.get_latest_tag.outputs.latest_tag }}" ]; then
            echo "Version changed"
            echo "::set-output name=version_changed::true"
          else
            echo "Version not changed"
            echo "::set-output name=version_changed::false"
          fi

      - name: Create and Push Tag
        id: push_tag
        if: steps.check_version.outputs.version_changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "${{ steps.get_current_version.outputs.current_version }}" -m "Generated tag from GitHub Actions"
          git push origin "${{ steps.get_current_version.outputs.current_version }}"
          
          ls -al
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        id: create_release
        if: steps.check_version.outputs.version_changed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_current_version.outputs.current_version }}
          release_name: Release ${{ steps.get_current_version.outputs.current_version }}
          draft: false
          prerelease: false
